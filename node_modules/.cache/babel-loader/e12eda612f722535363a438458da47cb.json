{"ast":null,"code":"import _regeneratorRuntime from \"/home/danil/Desktop/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/danil/Desktop/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/danil/Desktop/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/danil/Desktop/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/danil/Desktop/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/danil/Desktop/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/danil/Desktop/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/danil/Desktop/defi-staking-app-starter/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport './App.css';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport RWD from '../truffle_abis/RWD.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var web3, account, networkId, tetherData, rwdDAta, decentralBank, tether, tetherBalance, bank, stakingBalance, rwd, rwdBalance;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return window.web3;\n\n              case 2:\n                web3 = _context2.sent;\n                _context2.next = 5;\n                return web3.eth.getAccounts();\n\n              case 5:\n                account = _context2.sent;\n                this.setState({\n                  account: account[0]\n                });\n                _context2.next = 9;\n                return web3.eth.net.getId();\n\n              case 9:\n                networkId = _context2.sent;\n                console.log(networkId, \" NETWORK ID\");\n                console.log(account, \" ACCOUNTS\");\n                tetherData = Tether.networks[networkId];\n                rwdDAta = RWD.networks[networkId];\n                decentralBank = DecentralBank.networks[networkId];\n\n                if (!tetherData) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                //take tether contract.\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                }); //take balance of bank \n\n                _context2.next = 20;\n                return tether.methods.balance(this.state.account).call();\n\n              case 20:\n                tetherBalance = _context2.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                console.log(tetherBalance, \" BALANCE Tether BANK\");\n                _context2.next = 26;\n                break;\n\n              case 25:\n                window.alert('Tether contract not deployed');\n\n              case 26:\n                if (!decentralBank) {\n                  _context2.next = 35;\n                  break;\n                }\n\n                //take tether contract.\n                bank = new web3.eth.Contract(DecentralBank.abi, decentralBank.address);\n                this.setState({\n                  bank: bank\n                }); //take balance of bank \n\n                _context2.next = 31;\n                return bank.methods.stakingBalance(this.state.account).call();\n\n              case 31:\n                stakingBalance = _context2.sent;\n                this.setState({\n                  stakingBalance: stakingBalance\n                });\n                _context2.next = 36;\n                break;\n\n              case 35:\n                window.alert('Error!!decentralBank contract not deployed');\n\n              case 36:\n                if (!rwdDAta) {\n                  _context2.next = 46;\n                  break;\n                }\n\n                //take tether contract.\n                rwd = new web3.eth.Contract(RWD.abi, rwdDAta.address);\n                this.setState({\n                  rwd: rwd\n                }); //take balance of bank \n\n                _context2.next = 41;\n                return rwd.methods.balance(this.state.account).call();\n\n              case 41:\n                rwdBalance = _context2.sent;\n                this.setState({\n                  rwdBalance: rwdBalance\n                });\n                console.log(rwdBalance, \" BALANCE RWD BANK\");\n                _context2.next = 47;\n                break;\n\n              case 46:\n                window.alert('RWD contract not deployed');\n\n              case 47:\n                this.setState({\n                  loading: false\n                });\n\n              case 48:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereuem) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereuem);\n                _context3.next = 4;\n                return window.ethereuem.enable();\n\n              case 4:\n                _context3.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('No ethreuem window detected!Check MetaMask');\n                }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 1\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 1\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/danil/Desktop/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","App","loadWeb3","loadBlockchainData","window","web3","eth","getAccounts","account","setState","net","getId","networkId","console","log","tetherData","networks","rwdDAta","decentralBank","tether","Contract","abi","address","methods","balance","state","call","tetherBalance","toString","alert","bank","stakingBalance","rwd","rwdBalance","loading","ethereuem","enable","currentProvider","props"],"mappings":"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","sourcesContent":["\nimport React, {Component} from 'react'\nimport Navbar from './Navbar';\nimport './App.css'\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json'\nimport RWD from '../truffle_abis/RWD.json'\nimport DecentralBank from '../truffle_abis/DecentralBank.json'\n\nclass App extends Component{\n  async componentWillMount(){\n    //always take new addresses from metaMASK.\n    await this.loadWeb3()\n    await this.loadBlockchainData();\n  }\n  async loadBlockchainData(){\n\n    const web3=await window.web3\n    const account= await web3.eth.getAccounts()\n    this.setState({account:account[0]})\n    const networkId=await web3.eth.net.getId();\n    console.log(networkId,\" NETWORK ID\")\n    console.log(account,\" ACCOUNTS\")\n    const tetherData=Tether.networks[networkId];\n    const rwdDAta=RWD.networks[networkId];\n    const decentralBank=DecentralBank.networks[networkId];\n\n      \n    if (tetherData){\n      //take tether contract.\n      const tether=new web3.eth.Contract(Tether.abi,tetherData.address);\n      this.setState({tether});\n      //take balance of bank \n      let tetherBalance=await tether.methods.balance(this.state.account).call();\n      this.setState({tetherBalance:tetherBalance.toString()})\n      console.log(tetherBalance,\" BALANCE Tether BANK\")\n    }else{\n      window.alert('Tether contract not deployed')\n    }\n     \n    if (decentralBank){\n      //take tether contract.\n      const bank=new web3.eth.Contract(DecentralBank.abi,decentralBank.address);\n      this.setState({bank});\n      //take balance of bank \n      let stakingBalance=await bank.methods.stakingBalance(this.state.account).call();\n      this.setState({stakingBalance:stakingBalance})\n    }else{\n      window.alert('Error!!decentralBank contract not deployed')\n    }\n    if (rwdDAta){\n      //take tether contract.\n      const rwd=new web3.eth.Contract(RWD.abi,rwdDAta.address);\n      this.setState({rwd});\n      //take balance of bank \n      let rwdBalance=await rwd.methods.balance(this.state.account).call();\n      this.setState({rwdBalance:rwdBalance})\n      console.log(rwdBalance,\" BALANCE RWD BANK\" )\n    }else{\n      window.alert('RWD contract not deployed')\n    }\n\n    this.setState({loading:false})\n  }\n\n    async loadWeb3(){\n    if (window.ethereuem){\n        window.web3=new Web3(window.ethereuem);\n        await window.ethereuem.enable()\n    }else{\n        if (window.web3){\n            window.web3=new Web3(window.web3.currentProvider);\n        }else{window.alert('No ethreuem window detected!Check MetaMask')}\n    }\n  }\n    constructor(props){\n        super(props)\n        this.state={\n            account:'0x0',\n            tether:{},\n            rwd:{},\n            decentralBank:{},\n            tetherBalance:'0',\n            rwdBalance:'0',\n            stakingBalance:'0',\n            loading:true\n        }\n    }\n    render(){\n        return (\n<div>\n<Navbar account={this.state.account}/>\n\n\n</div>\n      )  \n    }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}